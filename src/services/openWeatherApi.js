import axios from 'axios';

// OpenWeatherMap API ÏÑ§Ï†ï
const API_KEY = import.meta.env.VITE_OPENWEATHER_API_KEY || 'demo_key';
const BASE_URL = 'https://api.openweathermap.org/data/2.5';

// API Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
const openWeatherApi = axios.create({
  baseURL: BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// ÏùëÎãµ Ïù∏ÌÑ∞ÏÖâÌÑ∞ - ÏóêÎü¨ Ï≤òÎ¶¨
openWeatherApi.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error('OpenWeatherMap API ÏöîÏ≤≠ Ïò§Î•ò:', error);
    return Promise.reject(error);
  }
);

// ÌòÑÏû¨ ÎÇ†Ïî® Ï†ïÎ≥¥ Ï°∞Ìöå
export const getCurrentWeather = async (lat = 37.738, lon = 127.034) => {
  try {
    console.log('ÌòÑÏû¨ ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠:', { lat, lon });

    const response = await openWeatherApi.get('/weather', {
      params: {
        lat,
        lon,
        appid: API_KEY,
        units: 'metric', // ÏÑ≠Ïî® Ïò®ÎèÑ
        lang: 'kr' // ÌïúÍµ≠Ïñ¥
      }
    });

    if (response.data) {
      return {
        success: true,
        data: processCurrentWeatherData(response.data),
        message: 'ÌòÑÏû¨ ÎÇ†Ïî® Ï°∞Ìöå ÏÑ±Í≥µ'
      };
    } else {
      throw new Error('ÏùëÎãµ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§');
    }
  } catch (error) {
    console.error('ÌòÑÏû¨ ÎÇ†Ïî® Ï°∞Ìöå Ïò§Î•ò:', error);

    // API ÌÇ§ Î¨∏Ï†ú ÏÉÅÏÑ∏ ÏóêÎü¨ Î©îÏãúÏßÄ
    if (error.response?.status === 401) {
      return {
        success: false,
        data: null,
        message: `OpenWeatherMap API Ïù∏Ï¶ù Ïã§Ìå® (401): API ÌÇ§Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî. ÌòÑÏû¨ ÌÇ§: ${API_KEY === 'demo_key' ? 'demo_key (Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå)' : 'ÏÑ§Ï†ïÎê®'}`
      };
    }

    return {
      success: false,
      data: null,
      message: error.response?.data?.message || error.message || 'ÌòÑÏû¨ ÎÇ†Ïî® Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
    };
  }
};

// 5Ïùº ÏòàÎ≥¥ Ï†ïÎ≥¥ Ï°∞Ìöå
export const getForecast = async (lat = 37.738, lon = 127.034) => {
  try {
    console.log('ÏòàÎ≥¥ Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠:', { lat, lon });

    const response = await openWeatherApi.get('/forecast', {
      params: {
        lat,
        lon,
        appid: API_KEY,
        units: 'metric',
        lang: 'kr'
      }
    });

    if (response.data) {
      return {
        success: true,
        data: processForecastData(response.data),
        message: 'ÏòàÎ≥¥ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ'
      };
    } else {
      throw new Error('ÏùëÎãµ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§');
    }
  } catch (error) {
    console.error('ÏòàÎ≥¥ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò:', error);

    if (error.response?.status === 401) {
      return {
        success: false,
        data: [],
        message: `OpenWeatherMap API Ïù∏Ï¶ù Ïã§Ìå® (401): API ÌÇ§Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.`
      };
    }

    return {
      success: false,
      data: [],
      message: error.response?.data?.message || error.message || 'ÏòàÎ≥¥ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
    };
  }
};

// ÎåÄÍ∏∞Ïßà Ï†ïÎ≥¥ Ï°∞Ìöå
export const getAirPollution = async (lat = 37.738, lon = 127.034) => {
  try {
    console.log('ÎåÄÍ∏∞Ïßà Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠:', { lat, lon });

    const response = await openWeatherApi.get('/air_pollution', {
      params: {
        lat,
        lon,
        appid: API_KEY
      }
    });

    if (response.data) {
      return {
        success: true,
        data: processAirPollutionData(response.data),
        message: 'ÎåÄÍ∏∞Ïßà Ï†ïÎ≥¥ Ï°∞Ìöå ÏÑ±Í≥µ'
      };
    } else {
      throw new Error('ÏùëÎãµ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§');
    }
  } catch (error) {
    console.error('ÎåÄÍ∏∞Ïßà Ï†ïÎ≥¥ Ï°∞Ìöå Ïò§Î•ò:', error);

    if (error.response?.status === 401) {
      return {
        success: false,
        data: null,
        message: `OpenWeatherMap API Ïù∏Ï¶ù Ïã§Ìå® (401): API ÌÇ§Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.`
      };
    }

    return {
      success: false,
      data: null,
      message: error.response?.data?.message || error.message || 'ÎåÄÍ∏∞Ïßà Ï†ïÎ≥¥ Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
    };
  }
};

// ÌòÑÏû¨ ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
const processCurrentWeatherData = (data) => {
  return {
    temperature: Math.round(data.main.temp * 10) / 10,
    feelsLike: Math.round(data.main.feels_like * 10) / 10,
    humidity: data.main.humidity,
    pressure: data.main.pressure,
    windSpeed: data.wind.speed,
    windDirection: getWindDirection(data.wind.deg),
    visibility: data.visibility ? Math.round(data.visibility / 1000) : null,
    precipitation: data.rain ? (data.rain['1h'] || 0) : 0,
    sky: data.weather[0].description,
    skyIcon: getWeatherIcon(data.weather[0].icon),
    cloudiness: data.clouds.all,
    sunrise: new Date(data.sys.sunrise * 1000).toLocaleTimeString('ko-KR', {
      hour: '2-digit',
      minute: '2-digit'
    }),
    sunset: new Date(data.sys.sunset * 1000).toLocaleTimeString('ko-KR', {
      hour: '2-digit',
      minute: '2-digit'
    }),
    lastUpdate: new Date().toLocaleTimeString('ko-KR', {
      hour: '2-digit',
      minute: '2-digit'
    }),
    location: `${data.name}, ${data.sys.country}`
  };
};

// ÏòàÎ≥¥ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
const processForecastData = (data) => {
  return data.list.map(item => ({
    datetime: new Date(item.dt * 1000),
    temperature: Math.round(item.main.temp * 10) / 10,
    feelsLike: Math.round(item.main.feels_like * 10) / 10,
    humidity: item.main.humidity,
    windSpeed: item.wind.speed,
    precipitation: item.rain ? (item.rain['3h'] || 0) : 0,
    sky: item.weather[0].description,
    skyIcon: getWeatherIcon(item.weather[0].icon),
    pop: Math.round(item.pop * 100) // Í∞ïÏàò ÌôïÎ•†
  }));
};

// ÎåÄÍ∏∞Ïßà Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
const processAirPollutionData = (data) => {
  const aqi = data.list[0];
  return {
    aqi: aqi.main.aqi,
    aqiText: getAQIText(aqi.main.aqi),
    co: aqi.components.co,
    no: aqi.components.no,
    no2: aqi.components.no2,
    o3: aqi.components.o3,
    so2: aqi.components.so2,
    pm2_5: aqi.components.pm2_5,
    pm10: aqi.components.pm10,
    nh3: aqi.components.nh3,
    lastUpdate: new Date().toLocaleTimeString('ko-KR', {
      hour: '2-digit',
      minute: '2-digit'
    })
  };
};

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
const getWindDirection = (deg) => {
  const directions = ['Î∂Å', 'Î∂ÅÎèô', 'Îèô', 'ÎÇ®Îèô', 'ÎÇ®', 'ÎÇ®ÏÑú', 'ÏÑú', 'Î∂ÅÏÑú'];
  return directions[Math.round(deg / 45) % 8];
};

const getWeatherIcon = (iconCode) => {
  const iconMap = {
    '01d': '‚òÄÔ∏è', '01n': 'üåô',
    '02d': '‚õÖ', '02n': '‚òÅÔ∏è',
    '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
    '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
    '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
    '10d': 'üå¶Ô∏è', '10n': 'üåßÔ∏è',
    '11d': '‚õàÔ∏è', '11n': '‚õàÔ∏è',
    '13d': 'üå®Ô∏è', '13n': 'üå®Ô∏è',
    '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è'
  };
  return iconMap[iconCode] || 'üå§Ô∏è';
};

const getAQIText = (aqi) => {
  const levels = {
    1: 'Îß§Ïö∞ Ï¢ãÏùå',
    2: 'Ï¢ãÏùå',
    3: 'Î≥¥ÌÜµ',
    4: 'ÎÇòÏÅ®',
    5: 'Îß§Ïö∞ ÎÇòÏÅ®'
  };
  return levels[aqi] || 'Ïïå Ïàò ÏóÜÏùå';
};

// Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ Ìï®ÏàòÎì§ (Í∞úÎ∞ú/ÌÖåÏä§Ìä∏Ïö©)
const getMockCurrentWeatherData = () => ({
  success: true,
  data: {
    temperature: 15.2 + (Math.random() - 0.5) * 4,
    feelsLike: 14.8 + (Math.random() - 0.5) * 4,
    humidity: 45 + Math.round((Math.random() - 0.5) * 20),
    pressure: 1013 + Math.round((Math.random() - 0.5) * 20),
    windSpeed: 3.2 + (Math.random() - 0.5) * 2,
    windDirection: "Î∂ÅÏÑú",
    visibility: 10,
    precipitation: Math.random() < 0.3 ? Math.random() * 2 : 0,
    sky: "ÎßëÏùå",
    skyIcon: "‚òÄÔ∏è",
    cloudiness: Math.round(Math.random() * 30),
    sunrise: "06:42",
    sunset: "17:28",
    lastUpdate: new Date().toLocaleTimeString('ko-KR', {
      hour: '2-digit',
      minute: '2-digit'
    }),
    location: "ÏùòÏ†ïÎ∂ÄÏãú, KR"
  },
  message: 'Î™©ÏóÖ ÌòÑÏû¨ ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞'
});

const getMockForecastData = () => ({
  success: true,
  data: Array.from({ length: 40 }, (_, i) => {
    const datetime = new Date();
    datetime.setHours(datetime.getHours() + i * 3);

    return {
      datetime,
      temperature: 15 + Math.sin(i * 0.2) * 8 + (Math.random() - 0.5) * 3,
      feelsLike: 14 + Math.sin(i * 0.2) * 8 + (Math.random() - 0.5) * 3,
      humidity: 50 + Math.sin(i * 0.3) * 20 + (Math.random() - 0.5) * 10,
      windSpeed: 2 + Math.random() * 4,
      precipitation: Math.random() < 0.3 ? Math.random() * 5 : 0,
      sky: Math.random() < 0.7 ? "ÎßëÏùå" : "ÌùêÎ¶º",
      skyIcon: Math.random() < 0.7 ? "‚òÄÔ∏è" : "‚òÅÔ∏è",
      pop: Math.round(Math.random() * 100)
    };
  }),
  message: 'Î™©ÏóÖ ÏòàÎ≥¥ Îç∞Ïù¥ÌÑ∞'
});

const getMockAirPollutionData = () => ({
  success: true,
  data: {
    aqi: Math.ceil(Math.random() * 3) + 1, // 1-4 Î≤îÏúÑ
    aqiText: ['Îß§Ïö∞ Ï¢ãÏùå', 'Ï¢ãÏùå', 'Î≥¥ÌÜµ', 'ÎÇòÏÅ®'][Math.floor(Math.random() * 4)],
    co: 200 + Math.random() * 100,
    no: 0.1 + Math.random() * 0.5,
    no2: 10 + Math.random() * 20,
    o3: 50 + Math.random() * 50,
    so2: 5 + Math.random() * 10,
    pm2_5: 15 + Math.random() * 20,
    pm10: 25 + Math.random() * 25,
    nh3: 1 + Math.random() * 5,
    lastUpdate: new Date().toLocaleTimeString('ko-KR', {
      hour: '2-digit',
      minute: '2-digit'
    })
  },
  message: 'Î™©ÏóÖ ÎåÄÍ∏∞Ïßà Îç∞Ïù¥ÌÑ∞'
});

// ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏ Ìï®Ïàò
export const checkApiConfiguration = () => {
  const config = {
    apiKey: !!API_KEY && API_KEY !== 'demo_key',
    baseUrl: BASE_URL,
    isDev: import.meta.env.DEV,
    mode: import.meta.env.MODE
  };

  console.log('OpenWeatherMap API ÏÑ§Ï†ï ÏÉÅÌÉú:', config);
  return config;
};

export default {
  getCurrentWeather,
  getForecast,
  getAirPollution,
  checkApiConfiguration
};